@model IHasPaging

@{
    var urlTemplate = Url.Action() + "?currentPage={0}";
    var request = ViewContext.HttpContext.Request;

    foreach (var key in request.Query.Keys)
    {
        if (key == "currentPage")
        {
            continue;
        }

        urlTemplate += "&" + key + "=" + request.Query[key];
    }
}

<nav class="mt-3">
    <ul class="pagination justify-content-center">
        <li class="page-item @(Model.HasPreviousPage == false ? "disabled" : string.Empty)">
            <a class="page-link" href="@urlTemplate.Replace("{0}", $"{Model.CurrentPage - 1}")">
                Previous
            </a>
        </li>

        @for (int index = Model.CurrentPage - 3; index < Model.CurrentPage; index++)
        {
            if (index >= 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@urlTemplate.Replace("{0}", $"{index}")">
                        @index
                    </a>
                </li>
            }
        }

        <li class="page-item active">
            <a class="page-link" href="@urlTemplate.Replace("{0}", $"{Model.CurrentPage}")">
                @Model.CurrentPage
            </a>
        </li>

        @for (int index = 1; index < Model.CurrentPage + 3; index++)
        {
            if (Model.TotalPages >= Model.CurrentPage + index)
            {
                <li class="page-item">
                    <a class="page-link" href="@urlTemplate.Replace("{0}", $"{Model.CurrentPage + index}")">
                        @(Model.CurrentPage + index)
                    </a>
                </li>
            }
        }

        <li class="page-item @(Model.HasNextPage == false ? "disabled" : string.Empty)">
            <a class="page-link" href="@urlTemplate.Replace("{0}", $"{Model.CurrentPage + 1}")">
                Next
            </a>
        </li>
    </ul>
</nav>
